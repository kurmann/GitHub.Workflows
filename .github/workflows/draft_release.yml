name: Draft Release
on:
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Which part of the version to increment: major, minor, or patch'
        required: true
        default: 'minor'

jobs:
  read_and_print_release_data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest release
        id: get_release
        run: |
          RELEASE_JSON=$(gh release view --json tagName,name,url)
          RELEASE_TAG_NAME=$(echo "$RELEASE_JSON" | jq -r '.tagName')
          RELEASE_NAME=$(echo "$RELEASE_JSON" | jq -r '.name')
          RELEASE_URL=$(echo "$RELEASE_JSON" | jq -r '.url')
          RELEASE_VERSION="${RELEASE_TAG_NAME#"v"}"
          echo "release_version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "release_tag_name=$RELEASE_TAG_NAME" >> "$GITHUB_OUTPUT"
          echo "release_body=$RELEASE_BODY" >> "$GITHUB_OUTPUT"
          echo "release_url=$RELEASE_URL" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      release_version: ${{ steps.get_release.outputs.release_version }}
      release_tag_name: ${{ steps.get_release.outputs.release_tag_name }}
      release_url: ${{ steps.get_release.outputs.release_url }}

  calculate_next_version:
    needs: read_and_print_release_data
    runs-on: ubuntu-latest
    steps:
      - name: Calculate next version
        id: calculate_version
        run: |
          LATEST_VERSION=${{ needs.read_and_print_release_data.outputs.release_version }}
          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          VERSION_INCREMENT=${{ github.event.inputs.version_increment }}
          if [[ "$VERSION_INCREMENT" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$VERSION_INCREMENT" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$VERSION_INCREMENT" == "patch" ]]; then
            PATCH=$((PATCH + 1))
          fi
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "next_version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
      - name: Print next version
        run: 'echo "Next Version: ${{ steps.calculate_version.outputs.next_version }}"'
    outputs:
      next_version: ${{ steps.calculate_version.outputs.next_version }}

  draft_release:
    needs: calculate_next_version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Release Drafter
        uses: release-drafter/release-drafter@v6
        with:
          config-name: 'release-drafter-config.yml'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT_VERSION: ${{ needs.calculate_next_version.outputs.next_version }}