name: Draft Release
on:
  push:

env:
  VERSION_INCREMENT: 'minor'  # Alternativ: major, patch

jobs:
  read_release_data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Get latest release
        id: get_latest_release
        run: |
          RELEASE_JSON=$(gh release view --json tagName,name,url)
          RELEASE_TAG_NAME=$(echo "$RELEASE_JSON" | jq -r '.tagName')
          RELEASE_NAME=$(echo "$RELEASE_JSON" | jq -r '.name')
          RELEASE_URL=$(echo "$RELEASE_JSON" | jq -r '.url')
          RELEASE_VERSION="${RELEASE_TAG_NAME#"v"}"
          echo "release_version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "release_tag_name=$RELEASE_TAG_NAME" >> "$GITHUB_OUTPUT"
          echo "release_url=$RELEASE_URL" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      release_version: ${{ steps.get_latest_release.outputs.release_version }}
      release_tag_name: ${{ steps.get_latest_release.outputs.release_tag_name }}
      release_url: ${{ steps.get_latest_release.outputs.release_url }}

  calculate_next_version:
    needs: read_release_data
    runs-on: ubuntu-latest
    steps:
      - name: Calculate next version
        id: calculate_version
        run: |
          LATEST_VERSION=${{ needs.read_release_data.outputs.release_version }}
          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          if [[ "$VERSION_INCREMENT" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$VERSION_INCREMENT" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$VERSION_INCREMENT" == "patch" ]]; then
            PATCH=$((PATCH + 1))
          fi
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "::set-output name=next_version::$NEXT_VERSION"
    outputs:
      next_version: ${{ steps.calculate_version.outputs.next_version }}

  draft_release:
    needs: calculate_next_version
    runs-on: ubuntu-latest
    steps:
      - name: Print next version for verification
        run: |
          echo "Next Version: ${{ needs.calculate_next_version.outputs.next_version }}"

      - name: Run Release Drafter
        id: release_drafter
        uses: release-drafter/release-drafter@v5
        with:
          config-name: 'release-drafter-config.yml'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.calculate_next_version.outputs.next_version }}
          NAME: v${{ needs.calculate_next_version.outputs.next_version }}
          TAG: v${{ needs.calculate_next_version.outputs.next_version }}
    outputs:
      release_id: ${{ steps.release_drafter.outputs.id }}
      release_name: ${{ steps.release_drafter.outputs.name }}
      release_tag_name: ${{ steps.release_drafter.outputs.tag_name }}
      release_body: ${{ steps.release_drafter.outputs.body }}
      release_html_url: ${{ steps.release_drafter.outputs.html_url }}
      release_upload_url: ${{ steps.release_drafter.outputs.upload_url }}

  print_release_info:
    needs: draft_release
    runs-on: ubuntu-latest
    steps:
      - name: Print Release Drafter outputs
        run: |
          echo "Release ID: ${{ needs.draft_release.outputs.release_id }}"
          echo "Release Name: ${{ needs.draft_release.outputs.release_name }}"
          echo "Release Tag Name: ${{ needs.draft_release.outputs.release_tag_name }}"
          echo "Release Body: ${{ needs.draft_release.outputs.release_body }}"
          echo "Release HTML URL: ${{ needs.draft_release.outputs.release_html_url }}"
          echo "Release Upload URL: ${{ needs.draft_release.outputs.release_upload_url }}"
